//ctually use drive encoders to ensure ratio of speed is correct
//cam
//see DOGP and fireMuhLazer for other changes to be made

#include "WPILib.h"//include main lib
#include "nivision.h"

#define IO (DriverStation::GetInstance()->GetEnhancedIO())//driver station input/output

//this part was added so the electronics team doesn't have to dig through code to make port changes
#define PILOT_PORT 1
#define COPILOT_PORT 2
#define LEFTY_PORT 1
#define RIGHTY_PORT 2
#define LEFTYB_PORT 4
#define RIGHTYB_PORT 5
#define ARM_PORT 3
#define INTAKE_PORT 6
#define LIFT_PORT 7
#define LTOP_PORT 8
#define LBOTTOM_PORT 9

AxisCamera &camera = AxisCamera::GetInstance();//live feed to driverstation instead of flawed nvision stuff
ColorImage image(IMAQ_IMAGE_RGB);//create an image

class Snowman : public SimpleRobot
{
	//declarations -- extra jag and gyro for balance?
    Jaguar teeth, intestines;
	Encoder LTopEnc, LBotEnc;//launch system   --  Lazer reference XD
	Joystick pilot, copilot;
	CANJaguar lefty, righty, leftyB, rightyB, teeth, intestines, LTop, LBot, arm;
	signed char negate, fPS;//find max FPS w/out slowing rob then use that as base
							//increase if turning fast and needed
	double flies, distance;//flies is a Vriska reference and refers to the angle from the target
						//distance will be a guessed distance from target via the camera code
	float decrement;//is set in DOGP to lower turning speed as nearing 0 flies
					//begins at full until within a range; then increasing rate of decrimate
public:
	Snowman(void)://Vriska reference and class name also
		
		pilot(PILOT_PORT),//below are constructors and such
		copilot(COPILOT_PORT),//pilot and copilot are in USB ports (adjustable via driverstation)
		
		lefty(LEFTY_PORT),//here until  V
		righty(RIGHTY_PORT),
		leftyB(LEFTYB_PORT),
		rightyB(RIGHTYB_PORT),
		arm(ARM_PORT),
		intake(INTAKE_PORT),
		lift(LIFT_PORT),
		LTop(LTOP_PORT),
		LBot(LBOTTOM_PORT),//HERE are jags that need to be in the order in which they are plugged in
		
		//LTopEnc(1,2),//encoders -- 2 channels each;  add drive encoders -- 2 or 4?encoders are part of the jags
		//LBotEnc(3,4)
	
		{
			fPS = 6;//later will change in loop depending on factors explained above
			camera.WriteMaxFPS(fPS);//needs to be called after above
			camera.WriteBrightness(0);
			camera.WriteWhiteBalance(AxisCamera::kWhiteBalance_Automatic);//best for now; redo at comp
			camera.WriteResolution(AxisCamera::kResolution_320x240);//higher = more accurate but slower
			
			decrement = 1;//value to slow jags when firing
			negate=1;//changes orrientation of drive
			
			lefty.ChangeControlMode(CANJaguar::kPercentVbus);//constructs canJags
			righty.ChangeControlMode(CANJaguar::kPercentVbus);
			leftyB.ChangeControlMode(CANJaguar::kPercentVbus);
			rightyB.ChangeControlMode(CANJaguar::kPercentVbus);
			intake.ChangeControlMode(CANJaguar::kPercentVbus);
			lift.ChangeControlMode(CANJaguar::kPercentVbus);
			LTop.ChangeControlMode(CANJaguar::kPercentVbus);
			LBot.ChangeControlMode(CANJaguar::kPercentVbus);
			
			LTopEnc.Reset();//set encoder to 0
			LBotEnc.Reset();
			LTopEnc.Start();//start encoder
			LBotEnc.Start();
			//add drive encoders
		}
	
	void DOGP(void)//%reference
	{
		camera.GetImage(&image);//rest of tracking loop here also
		//with cam, set distance and flies
		
		/*
		 * put movement in a loop which terminates when aiming correctly (will need
		 * image tracking from above) 
		 * change decrement as turning or moving if not in range (turning and movement
		 * will require setting X and Y values as are in creep)
		 * 
		 * Also, calculate speed for top and bot jags and set
		*/
	}
	
	void fireMuhLazer(void)//&reference
	{
		DOGP();
		//move balls up  --  will require a wait
		//turn off ltop and lbot and lift and intake
	}
	
	void creep(void)//Vriska reference and drive system -- system similar to a car
	{				
		if (pilot.GetY() > 0 && pilot.GetX() >= 0)//forward right
		{
			lefty.Set(pilot.GetY() * negate * decrement);//left motors full
			leftyB.Set(pilot.GetY() * negate * decrement);//left motors full
			righty.Set(( pilot.GetY() - pilot.GetX() * 2 ) * negate * decrement);//right motors full dec by twiceX abs X
			rightyB.Set(( pilot.GetY() - pilot.GetX() * 2 ) * negate * decrement);
		}//(so up to x = 0 right rev and when y negative, backward curve)
		else if (pilot.GetY() < 0 && pilot.GetX() > 0)//backward left
		{
			righty.Set(pilot.GetY() * negate * -1 * decrement);
			rightyB.Set(pilot.GetY() * negate * -1 * decrement);
			lefty.Set((pilot.GetY() - pilot.GetX() * 2) * negate * decrement);
			leftyB.Set((pilot.GetY() - pilot.GetX() * 2) * negate * decrement);
		}
		else if (pilot.GetY() > 0 && pilot.GetX() <= 0)//forward left
		{
			righty.Set(pilot.GetY() * negate * decrement);
			rightyB.Set(pilot.GetY() * negate * decrement);
			lefty.Set((pilot.GetX() * 2 + pilot.GetY()) * negate * decrement);
			leftyB.Set((pilot.GetX() * 2 + pilot.GetY()) * negate * decrement);
		}
		else if (pilot.GetY() < 0 && pilot.GetX() < 0)//back right
		{
			lefty.Set(pilot.GetY() * negate * -1 * decrement);//left full back
			leftyB.Set(pilot.GetY() * negate * -1 * decrement);//left full back
			righty.Set(( pilot.GetY() + pilot.GetX() * 2 ) * negate * decrement);//right morots full dec by twice abs X
			rightyB.Set(( pilot.GetY() + pilot.GetX() * 2 ) * negate * decrement);
		}
		else
		{
			righty.Set(pilot.GetY() *negate * decrement);
			rightyB.Set(pilot.GetY() *negate * decrement);
			lefty.Set(pilot.GetY() *negate * decrement);
			leftyB.Set(pilot.GetY() *negate * decrement);
		}
	}

    void consume(void)
    {
        if(/*whether we want a ball taken in or not...*/)
            teeth.Set(0.3);
    }
    void digest(void)
    {
        intesines.Set(0.3);
    }	
	void Autonomous(void)
	{
		GetWatchdog().Kill();
		while (IsAutonomous())
		{
			DOGP();//aim and shoot
		}
	}
	void OperatorControl(void)
	{
		GetWatchdog().Kill();
		while (IsOperatorControl())
		{
				
			if (copilot.GetTop())//for moving platform arm
				arm.Set(-1);
			else if (copilot.GetTrigger())
				arm.Set(1);
			else
				arm.Set(0);
			
			if (copilot.GetRawButton(1))//aim and set jag power
				DOGP();//aim and shoot
			
			intake.Set(copilot.GetTwist());//take in balls

			if (pilot.GetRawButton(1)){negate *= -1;}//to reverse creep
			decrement = 1;//because full power for driver when not auto aiming
			creep();//drive system
			
		}
		LTopEnc.Stop();//stop encoders
		LBotEnc.Stop();
		//include drive encoders
	}
};

START_ROBOT_CLASS(Snowman);//called by driverstation