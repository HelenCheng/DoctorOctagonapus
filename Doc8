//cam and rail

#include "WPILib.h"

#define IO (DriverStation::GetInstance()->GetEnhancedIO())

class Init : public SimpleRobot
{
	//declarations -- extra jag and gyro for balance?
	Encoder /*leftyEnc, rightyEnc,*/ yawEnc, pitchEnc, LTopEnc, LBotEnc;
	Joystick pilot, copilot;
	Jaguar lefty, righty, leftyB, rightyB, intake, lift, raiseTower, yaw, pitch, LTop, LBot;
	bool raiseB;
	short int negate;
	
public:
	Init(void):
		pilot(1),
		copilot(2),
		lefty(1),
		righty(2),
		leftyB(10),
		rightyB(11),//not possible with 1 sidecar but bc/can drive, will not use sidecar
		intake(3),
		lift(4),
		raiseTower(5),
		yaw(6),
		pitch(7),
		LTop(8),
		LBot(9),
		//leftyEnc(1,2),
		//rightyEnc(3,4),
		LTopEnc(5,6),
		LBotEnc(5,6),
		yawEnc(7,8),
		pitchEnc(9,10)
		{
		}
	
	void Autonomous(void)
	{
		GetWatchdog().Kill();
	}
	void OperatorControl(void)
	{
		GetWatchdog().Kill();
		raiseB=1;
		negate=1;
		while (IsOperatorControl())
		{
			if (copilot.GetRawButton(1))
				raiseB = 1;
			else if (copilot.GetRawButton(2))
				raiseB = 0;
			
			if (raiseB)//for tower controll
			{
				if (copilot.GetTop())//trigger top left - top tower
				{
					raiseTower.Set(1);
				}
				else if (copilot.GetTrigger())//lower tower top tower
				{
					raiseTower.Set(-1);
				}
				else {raiseTower.Set(0);}
				
				//put auton top here
				/*
				 * For Use:
					yaw
					pitch
					LTop
					LBot
					LTopEnc
					LBotEnc
					yawEnc
					pitchEnc
					lift
				 */
				
				
				
				
			}
			else//for top override
			{

				lift.Set(copilot.GetY());//raise ball (act on 2 jags)
				LTop.Set(1);
				LBot.Set(-1);
				if (copilot.GetTop())
				{
					yaw.Set(-.3);
				}
				else if (copilot.GetTrigger())//lower tower top tower
				{
					yaw.Set(.3);
				}
				else
				{
					yaw.Set(0);
				}
				
				if (copilot.GetRawButton(3))
				{
					pitch.Set(.3);
				}
				else if (copilot.GetRawButton(4))
				{
					pitch.Set(-.3);
				}
				else
				{
					pitch.Set(0);
				}
			}
			
			intake.Set(copilot.GetTwist());
			
			//Drive
			if (pilot.GetRawButton(1)){negate *= -1;}
			if (pilot.GetY() + 2 * pilot.GetX() > -1 && pilot.GetY() + 2 * pilot.GetX() < 1)
			{
				lefty.Set((pilot.GetY() + 2 * pilot.GetX()) *negate);//left thumb?
				leftyB.Set((pilot.GetY() + 2 * pilot.GetX()) *negate);//left thumb?
			}
			else if ( pilot.GetY() + 2 * pilot.GetX() >= 1)
			{
				lefty.Set(1*negate);
				leftyB.Set(1*negate);
			}
			else 
			{
				lefty.Set(-1*negate);
				leftyB.Set(-1*negate);
			}
			
			if (pilot.GetY() - 2 * pilot.GetX() > -1 && pilot.GetY() - 2 * pilot.GetX() < 1)
			{
				righty.Set((pilot.GetY() - 2 * pilot.GetX()) *negate);//twist is w/z
				rightyB.Set((pilot.GetY() - 2 * pilot.GetX()) *negate);//twist is w/z
			}
			else if ( pilot.GetY() - 2 * pilot.GetX() >= 1)
			{
				righty.Set(1*negate);
				rightyB.Set(1*negate);
			}
			else 
			{
				righty.Set(-1*negate);
				rightyB.Set(-1*negate);
			}
			
			
				
			Wait(0.005);				// wait for a motor update time
		}
	}
};

START_ROBOT_CLASS(Init);

